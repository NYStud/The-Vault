#!/usr/bin/perl
 
use strict;
use warnings;
 
use CGI  qw(:standard);
use CGI::Carp qw(fatalsToBrowser);
use String::Random;
use Authen::Passphrase::BlowfishCrypt;
use VaultDB::Schema  ;
use Error qw(:try);


use JSON;

$| = 1;

my $passphrase=param('passphrase');


my $ppr = Authen::Passphrase::BlowfishCrypt->new(
                cost => 14, salt_random => 1,
                passphrase => $passphrase);

my $salt=$ppr->salt_base64;
my $hash=$ppr->hash_base64;
print header('application/json');
my $json = new JSON;
$json = $json->pretty() ;
$json = $json->ascii() ;
my $validation = new String::Random;
my $jsonStructure;
my $schema = VaultDB::Schema->connect('DBI:mysql:vault:localhost','vault','this_is_not_a_real_password');
$jsonStructure->{result}="<p>Thank you for registering</p><br><p>You should recieve an email which will be used to validate your email address, you will not be able to log in until your address is validated</p>";
try {
my $new_user = $schema->resultset('User')->create({
	username			=> param('username'),
    salt            	=> $salt,
    cost            	=> 14,
    hash            	=> $hash,
    validation_string	=> $validation->randregex('\w{32}'),
    email_address   	=> param('email_address')
  }); } otherwise  {
			$jsonStructure->{result}="<p>An error has occured systems have been contacted please try again later</p>";
			} ;

print  $json->encode($jsonStructure);
