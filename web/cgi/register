#!/usr/bin/perl
 

use strict;
use warnings;
use lib '/var/www/vault/cgi' ;


 
use CGI  qw(:standard);
use CGI::Carp qw(fatalsToBrowser);
use String::Random;
use Authen::Passphrase::BlowfishCrypt;
use Error qw(:try);
use Vault::core;



use JSON;

$| = 1;

my $vault = Vault::core->new();
my $passphrase=param('passphrase');
my $ppr = Authen::Passphrase::BlowfishCrypt->new(
                cost => $vault->get_default_value('passphrase_cost',11), salt_random => 1,
                passphrase => $passphrase);
my $salt=$ppr->salt_base64;
my $hash=$ppr->hash_base64;
print header('application/json');
my $json = new JSON;
$json = $json->pretty() ;
$json = $json->ascii() ;
my $validation = new String::Random;
my $validation_string = $validation->randregex('\w{32}') ;
my $email_address = param('email_address') ;
my $username= param('username');
my $jsonStructure;
$jsonStructure->{result}="<p>Thank you for registering</p><br><p>You should recieve an email which will be used to validate your email address, you will not be able to log in until your address is validated</p>";
try {
  my $new_user = $vault->{schema}->resultset('User')->create({
	username			=> $username,
    salt            	=> $salt,
    cost            	=> $vault->get_default_value('passphrase_cost',11),
    hash            	=> $hash,
    validation_string	=> $validation_string,
    email_address   	=> $email_address 
  }); } 
otherwise  { $jsonStructure->{result}="<p>An error has occured systems have been contacted please try again later</p>"; } ;
#try {
  $vault->send_validation_email($email_address,$validation_string,$username);
# }
#otherwise { $jsonStructure->{result}="<p>An error has occured while trying to send your validation email, please try and log in later and select resend validation email</p>"; }

print  $json->encode($jsonStructure);
